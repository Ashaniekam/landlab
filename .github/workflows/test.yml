name: Test

on:
  - push
  - pull_request

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    # Run on external PRs, but not on internal PRs, to avoid duplicate runs
    if: |
      github.event_name == 'push' ||
      github.event.pull_request.head.repo.full_name != github.repository

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          miniforge-variant: Miniforge3
          miniforge-version: latest
          auto-update-conda: true

      - name: Show conda installation info
        run: |
          conda info
          conda list

      - name: Install compilers
        run: conda install c-compiler cxx-compiler -c conda-forge

      - name: Build
        run: |
          pip install nox
          nox -s build --force-pythons=${{ matrix.python-version }} --no-venv

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.python-version }}
          path: build/wheelhouse/*

  test:
    needs: build
    name: Run the tests

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]
        pytest-marker: ["slow", "not slow"]
        session-name: ["test", "test-notebooks"]
        exclude:
          - session-name: "test-notebooks"
            python-version: 3.10
          - session-name: "test-notebooks"
            python-version: 3.11
          - session-name: "test-notebooks"
            os: ubuntu-latest

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          miniforge-variant: Miniforge3
          miniforge-version: latest
          auto-update-conda: true

      # - name: Install and test richdem engine
      #   run: |
      #     conda install richdem -c conda-forge
      #     python -c 'import _richdem'

      - uses: actions/download-artifact@v4
        name: Download build artifact
        with:
          name: build-${{ matrix.os }}-${{ matrix.python-version }}

      - name: Test
        env:
          HYPOTHESIS_PROFILE: "ci"
          OPENTOPOGRAPHY_API_KEY: ${{ secrets.OPENTOPOGRAPHY_API_KEY }}
          MPLBACKEND: "Agg"
        run: |
          pip install nox
          nox --verbose --no-venv -s ${{ matrix.session-name }} \
              --force-pythons=${{ matrix.python-version }} \
              -- -m '${{ matrix.pytest-marker }}' --path=*whl

      - name: Upload executed notebooks
        if: ${{ matrix.os == 'macos-latest' && matrix.session-name == 'test-notebooks' }}
        uses: actions/upload-artifact@v4
        with:
          name: notebooks-${{ matrix.os }}-${{ matrix.python-version }}
          path: docs/source/tutorials/**/*.ipynb
          overwrite: true

      - name: Coveralls
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.session-name == 'test' }}
        uses: AndreMiras/coveralls-python-action@develop
        with:
          parallel: true
          flag-name: py${{ matrix.python-version }}-${{ matrix.os }}-${{ matrix.pytest-marker }}
          debug: true

  docs:
    needs: test
    matrix:
      os: [macos-latest]
      python-version: ["3.12"]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          miniforge-variant: Miniforge3
          miniforge-version: latest
          auto-update-conda: true

      - uses: actions/download-artifact@v4
        name: Download build artifact
        with:
          name: notebooks-${{ matrix.os }}-${{ matrix.python-version }}
          path: docs/source/tutorials/
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R

      - name: install and check pandoc
        run: |
          conda install pandoc -c conda-forge
          pandoc --help
          pandoc --version

      - name: Build documentation
        run: |
          pip install nox
          nox --no-venv -s docs-build

      - name: Create zip
        run: zip -r docs.zip build/html

      - name: Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: docs-${{ matrix.os }}-${{ matrix.python-version }}
          path: docs.zip

  coveralls_finish:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Coveralls Finished
        uses: AndreMiras/coveralls-python-action@develop
        with:
          parallel-finished: true
          debug: true
